apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

version = file('version').text
ext.tf_vendor = 'Triniforce.com'

// Project configuration is used for Maven  deploy:
//artifactId = 'tf-server-toolkit'

// Get dynamic environment settings
apply from: 'config.gradle'

ext.testFolderDir = new File(buildDir, 'test')


defaultTasks 'clean', 'ide'

repositories {

	//	mavenCentral()
		maven {
			url MavenResolveUrl
			credentials(PasswordCredentials) {
				username = MavenUsername
				password = MavenPassword
			}

		}
}

processResources {
	from('src') {
		include '**/*.properties'
		include '**/*.wiki'
		include '**/*.bsh'
		include '**/*.htm'
	}
	from('test') {
		include '**/*.jar'
		include '**/*.bs'
		include '**/*.txt'
		include '**/*.properties'
		include '**/*.soap'
		include '**/*.wiki'

	}
}

configurations { providedCompile }

dependencies {
	compile(group: 'net.sf.sojo', name: 'sojo', version: '1.0.0') //NOTE: this is a copy from tflib. Modern versions is not comatible with Tomcat

}

sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile

sourceSets {
	main.java.srcDirs = ['src']
	test.java.srcDirs = ['test']
}


//eclipseJdt << {
//	file('.settings/org.eclipse.core.resources.prefs').write(
//	  'eclipse.preferences.version=1\n' +
//	  'encoding/<project>=UTF-8\n'
//	)
//}

task ide(dependsOn: tasks.eclipse) {
	group = 'IDE'
	description = 'preparing for work in the development environment'
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts { archives sourcesJar }

ext.vgroupId = 'ias.test'
ext.GITHUB_OWNER = "alexeywhite";
ext.GITHUB_REPOSITORY = "act1test";

publishing {

	repositories {
		maven {
			name = "GitHubPackages"
			url = 'https://maven.pkg.github.com/'+GITHUB_OWNER+'/'+GITHUB_REPOSITORY
			credentials {
				username = GithubRegistryUsername
				password = GithubRegistryToken
			}
		}
	}

	publications {
		gpr(MavenPublication) {
			groupId = vgroupId
			artifactId = GITHUB_REPOSITORY
			version = getNextVersion(requestLastRegistryVersion())

			from(components.java)
		}
	}
}

task jar_lib(type: Copy, dependsOn:[jar]){
	from "${jar.destinationDir}/${jar.archiveName}"
	into "$System.env.TF_LIB_HOME/srvdist"
	rename { String fileName -> 'tf-server-toolkit.jar' }
}

jar_lib.doFirst{
	def envName ="TF_LIB_HOME"
	def env = System.env[envName]
	if (null == env || env.length() == 0){
		throw new StopExecutionException("Variable $envName must point to TF_LIB HOME")
	}
}

jar {
	manifest {
		attributes(
				"Specification-Title": project.name,
				"Specification-Version": version,
				"Specification-Vendor": tf_vendor,
				"Implementation-Title": project.name,
				"Implementation-Version": "$version (${new Date().format('yyyy-MM-dd')})",
				"Implementation-Vendor": tf_vendor
				)
	}
}

import groovy.json.JsonOutput;
import groovy.json.JsonSlurper;

String requestLastRegistryVersion(){
	def gqlQuery = """
query{repository(owner:"${GITHUB_OWNER}", name:"${GITHUB_REPOSITORY}"){
  id
  registryPackages(last: 1) {
    edges {
      node {
        id
        latestVersion {
          id
          version
        }
      }
    }
  }
}}
""";
	def baseUrl = new URL('https://api.github.com/graphql')
	def connection = baseUrl.openConnection()
	connection.with {
		doOutput = true
		doInput = true
		requestMethod = 'POST'
		def basicAuth = 'token ' + GithubRegistryToken
		setRequestProperty("Authorization", basicAuth);
		outputStream.withWriter { writer ->
			writer << JsonOutput.toJson(["query": gqlQuery])
		}
		def strResp = content.text;
		println strResp;
		def gqlResponse =  new JsonSlurper().parseText(strResp);
		def latestVersion = gqlResponse.data.repository.registryPackages.edges[0].node.latestVersion.version;
		println "latest version : " + latestVersion;
		return latestVersion;
	}

}

String getNextVersion(String registryVersion){
	def matcher = registryVersion =~ /^(\d+\.\d+)\.(\d{1,4})$/;

	assert matcher.find();
	def major = matcher[0][1];
	def minor = matcher[0][2];
	def nextVersion;
	if(version.startsWith(major, 0))
		nextVersion = major + '.'+((minor as int) + 1);
	else
		nextVersion = version + ".0";
	return nextVersion;
}

task showNextPackageVersion(){
	println "next version : " + getNextVersion(requestLastRegistryVersion());

}
